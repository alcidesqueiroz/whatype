const test = require('tap').test;
const whatype = require('.');

test('whatype function', (t) => {
  t.equal(whatype(''), 'string');
  t.equal(whatype('whatever'), 'string');
  t.equal(whatype(new String('foo')), 'string');
  t.equal(whatype(null), 'null');
  t.equal(whatype(undefined), 'undefined');
  t.equal(whatype(NaN), 'not-a-number');
  t.equal(whatype(0), 'number');
  t.equal(whatype(42), 'number');
  t.equal(whatype(30.5), 'number');
  t.equal(whatype(-17), 'number');
  t.equal(whatype(new Number('12')), 'number');
  t.equal(whatype(true), 'boolean');
  t.equal(whatype(false), 'boolean');
  t.equal(whatype(new Boolean(1)), 'boolean');
  t.equal(whatype(function() { return arguments; }()), 'arguments');
  t.equal(whatype(Infinity), 'infinity');
  t.equal(whatype(-Infinity), '-infinity');
  t.equal(whatype({}), 'object');
  t.equal(whatype(Object.create(null)), 'object');
  t.equal(whatype(new function(){}), 'object');
  t.equal(whatype({ a: 123 }), 'object');
  t.equal(whatype(/\d/), 'regexp');
  t.equal(whatype([]), 'array');
  t.equal(whatype([ 11, 22 ]), 'array');
  t.equal(whatype(function(){}), 'function');
  t.equal(whatype(async function (){}), 'async-function');
  t.equal(whatype(function *(){}), 'generator-function');
  t.equal(whatype(() => {}), 'function');
  t.equal(whatype(Symbol('foo')), 'symbol');
  t.equal(whatype(new Date()), 'date');
  t.equal(whatype(new Error()), 'error');
  t.equal(whatype(new ReferenceError()), 'error');
  t.equal(whatype(new EvalError()), 'error');
  t.equal(whatype(new TypeError()), 'error');
  t.equal(whatype(new URIError()), 'error');
  t.equal(whatype(new RangeError()), 'error');
  t.equal(whatype(new SyntaxError()), 'error');
  t.equal(whatype(new Map()), 'map');
  t.equal(whatype(new WeakMap()), 'weak-map');
  t.equal(whatype(new Set()), 'set');
  t.equal(whatype(new WeakSet()), 'weak-set');
  t.equal(whatype(new Float32Array()), 'typed-array');
  t.equal(whatype(new Float64Array()), 'typed-array');
  t.equal(whatype(new Int16Array()), 'typed-array');
  t.equal(whatype(new Int32Array()), 'typed-array');
  t.equal(whatype(new Int8Array()), 'typed-array');
  t.equal(whatype(new Uint16Array()), 'typed-array');
  t.equal(whatype(new Uint32Array()), 'typed-array');
  t.equal(whatype(new Uint8Array()), 'typed-array');
  t.equal(whatype(new ArrayBuffer(10)), 'array-buffer');
  t.equal(whatype(new DataView(new ArrayBuffer())), 'data-view');
  t.equal(whatype(new Promise(() => {})), 'promise');

  t.end();
});


test('whatype.is function', (t) => {
  t.ok(whatype.is('', 'string'));
  t.ok(whatype.is('', 'falsy'));
  t.ok(whatype.is('whatever', 'string'));
  t.ok(whatype.is('whatever', 'truthy'));
  t.ok(whatype.is(new String('foo'), 'string'));
  t.ok(whatype.is(new String('foo'), 'string-object'));
  t.ok(whatype.is(new String(''), 'falsy'));
  t.ok(whatype.is(null, 'null'));
  t.ok(whatype.is(undefined, 'undefined'));
  t.ok(whatype.is(undefined, 'falsy'));
  t.ok(whatype.is(null, 'nil'));
  t.ok(whatype.is(undefined, 'nil'));
  t.ok(whatype.is(null, 'falsy'));
  t.ok(whatype.is(undefined, 'falsy'));
  t.ok(whatype.is(NaN, 'not-a-number'));
  t.ok(whatype.is(NaN, 'numeric'));
  t.ok(whatype.is(NaN, 'falsy'));
  t.ok(whatype.is(0, 'number'));
  t.ok(whatype.is(0, 'numeric'));
  t.ok(whatype.is(0, 'falsy'));
  t.ok(whatype.is(42, 'number'));
  t.ok(whatype.is(42, 'numeric'));
  t.ok(whatype.is(30.5, 'number'));
  t.ok(whatype.is(30.5, 'numeric'));
  t.ok(whatype.is(-17, 'number'));
  t.ok(whatype.is(-17, 'numeric'));
  t.ok(whatype.is(new Number('12'), 'number'));
  t.ok(whatype.is(new Number('12'), 'number-object'));
  t.ok(whatype.is(new Number('12'), 'numeric'));
  t.ok(whatype.is(true, 'boolean'));
  t.ok(whatype.is(false, 'boolean'));
  t.ok(whatype.is(false, 'falsy'));
  t.ok(whatype.is(new Boolean(1), 'boolean'));
  t.ok(whatype.is(new Boolean(1), 'boolean-object'));
  t.ok(whatype.is(new Boolean(0), 'falsy'));
  t.ok(whatype.is(function() { return arguments; }(), 'arguments'));
  t.ok(whatype.is(function() { return arguments; }(), 'object'));
  t.ok(whatype.is(Infinity, 'infinity'));
  t.ok(whatype.is(-Infinity, '-infinity'));
  t.ok(whatype.is(Infinity, 'numeric'));
  t.ok(whatype.is(-Infinity, 'numeric'));
  t.ok(whatype.is({}, 'object'));
  t.ok(whatype.is({}, 'literal-object'));
  t.ok(whatype.is({}, 'empty-literal-object'));
  t.ok(whatype.is(Object.create(null), 'object'));
  t.ok(whatype.is(Object.create(null), 'pure-object'));
  t.notOk(whatype.is({}, 'pure-object'));
  t.ok(whatype.is({ a: 123 }, 'object'));
  t.ok(whatype.is({ a: 123 }, 'literal-object'));
  t.notOk(whatype.is({ a: 123 }, 'empty-literal-object'));
  t.notOk(whatype.is(new function A(){}, 'empty-literal-object'));
  t.ok(whatype.is(new function A(){}, 'object'));
  t.notOk(whatype.is(new function A(){}, 'literal-object'));
  t.ok(whatype.is(/\d/, 'regexp'));
  t.ok(whatype.is([], 'array'));
  t.ok(whatype.is([], 'empty-array'));
  t.ok(whatype.is([ 11, 22 ], 'array'));
  t.notOk(whatype.is([ 11, 22 ], 'empty-array'));
  t.ok(whatype.is(function(){}, 'function'));
  t.ok(whatype.is(function(){}, 'common-function'));
  t.ok(whatype.is(() => {}, 'function'));
  t.ok(whatype.is(() => {}, 'common-function'));
  t.ok(whatype.is(async function (){}, 'async-function'));
  t.ok(whatype.is(async function (){}, 'function'));
  t.notOk(whatype.is(async function (){}, 'common-function'));
  t.ok(whatype.is(function *(){}, 'generator-function'));
  t.ok(whatype.is(function *(){}, 'function'));
  t.notOk(whatype.is(function *(){}, 'common-function'));
  t.ok(whatype.is(Symbol('foo'), 'symbol'));
  t.ok(whatype.is(new Date(), 'date'));
  t.ok(whatype.is(new Error(), 'error'));
  t.ok(whatype.is(new ReferenceError(), 'error'));
  t.ok(whatype.is(new ReferenceError(), 'reference-error'));
  t.ok(whatype.is(new EvalError(), 'error'));
  t.ok(whatype.is(new EvalError(), 'eval-error'));
  t.ok(whatype.is(new TypeError(), 'error'));
  t.ok(whatype.is(new TypeError(), 'type-error'));
  t.ok(whatype.is(new URIError(), 'error'));
  t.ok(whatype.is(new URIError(), 'uri-error'));
  t.ok(whatype.is(new RangeError(), 'error'));
  t.ok(whatype.is(new RangeError(), 'range-error'));
  t.ok(whatype.is(new SyntaxError(), 'error'));
  t.ok(whatype.is(new SyntaxError(), 'syntax-error'));
  t.ok(whatype.is(new Map(), 'map'));
  t.ok(whatype.is(new WeakMap(), 'weak-map'));
  t.ok(whatype.is(new Set(), 'set'));
  t.ok(whatype.is(new WeakSet(), 'weak-set'));
  t.ok(whatype.is(new Float32Array(), 'typed-array'));
  t.ok(whatype.is(new Float32Array(), 'float32-array'));
  t.ok(whatype.is(new Float64Array(), 'typed-array'));
  t.ok(whatype.is(new Float64Array(), 'float64-array'));
  t.ok(whatype.is(new Int16Array(), 'typed-array'));
  t.ok(whatype.is(new Int16Array(), 'int16-array'));
  t.ok(whatype.is(new Int32Array(), 'typed-array'));
  t.ok(whatype.is(new Int32Array(), 'int32-array'));
  t.ok(whatype.is(new Int8Array(), 'typed-array'));
  t.ok(whatype.is(new Int8Array(), 'int8-array'));
  t.ok(whatype.is(new Uint16Array(), 'typed-array'));
  t.ok(whatype.is(new Uint16Array(), 'uint16-array'));
  t.ok(whatype.is(new Uint32Array(), 'typed-array'));
  t.ok(whatype.is(new Uint32Array(), 'uint32-array'));
  t.ok(whatype.is(new Uint8Array(), 'typed-array'));
  t.ok(whatype.is(new Uint8Array(), 'uint8-array'));
  t.ok(whatype.is(new ArrayBuffer(10), 'array-buffer'));
  t.ok(whatype.is(new DataView(new ArrayBuffer()), 'data-view'));
  t.ok(whatype.is(new Promise(() => {}), 'promise'));

  t.end();
});
